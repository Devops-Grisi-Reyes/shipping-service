name: Publish Docker image

on:
  push:
    branches:
      - dev
      - main
      - staging

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN}}
  AWS_REGION: 'us-east-1'
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  PERSONAL_ACCESS_TOKEN_INFRA: ${{ secrets.PERSONAL_ACCESS_TOKEN_INFRA }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: maurig13/devops-grisi-reyes
          tags: products-service-${{ github.ref_name }}

      - uses: docker/setup-buildx-action@v1

      - uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Devops-Grisi-Reyes_shipping-service

      - name: Check Quality Gates
        run: |
          curl -u ${{ env.SONAR_TOKEN }} "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Devops-Grisi-Reyes_shipping-service&branch=${{ github.ref_name }}" > result.json
          cat result.json
          if [ $(jq -r '.projectStatus.status' result.json) = ERROR ]; then
            echo "Se aborta el pipeline debido a que no cumple con los Quality Gates"
            exit 1
          fi

  deploy:
    needs: [build, test]
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      # - uses: actions/checkout@v3
      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        id: install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION}}

      - name: Update kube config
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION}} --name cluster-grisi-reyes-${{ github.ref_name }}

      - uses: actions/checkout@v3
        with:
          repository: Devops-Grisi-Reyes/Infra
          ref: master
          token: ${{ env.PERSONAL_ACCESS_TOKEN_INFRA }}

      - name: Deploy to EKS
        run: |
          kubectl apply -f ./deployments/shipping-service-deployment.yml
